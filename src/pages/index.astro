---
import { AlertCircle } from "lucide-react";
import { ExclamationTriangleIcon } from "@radix-ui/react-icons";
import * as XLSX from "xlsx";
// import { saveAs } from 'file-saver';
import "@/styles/globals.css";
import "react-circular-progressbar/dist/styles.css";
import ProgressBar from "react-progressbar";
// import Circles from "react-loader-spinner";
import {
  Card,
  CardFooter,
  CardHeader,
  CardContent,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

let files = [];
let error = "";
let loading = false;
let progress = 0;
let convertedFiles = [];
let successMessage = "";

let handleFileChange = (e) => {
  const selectedFiles = Array.from(e.target.files);
  const invalidFiles = selectedFiles.filter((file) => file.type !== "text/csv");

  if (invalidFiles.length > 0) {
    console.log("Please upload only CSV files.!!!!!");
    error = "Please upload only CSV files.";
    files = [];
    return;
  }

  files = selectedFiles;
  error = "";
  successMessage = "";
};

const handleConvert = () => {
  if (files.length === 0) {
    error = "Please upload CSV files first.";
    return;
  }

  error = "";
  loading = true;
  progress = 0;
  convertedFiles = [];
  successMessage = "";

  files.forEach((file, index) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = e.target.result;
        const workbook = XLSX.read(data, { type: "binary" });
        const worksheet = workbook.Sheets[workbook.SheetNames[0]];
        const excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        const newWorkbook = XLSX.utils.book_new();
        const newWorksheet = XLSX.utils.aoa_to_sheet(excelData);
        XLSX.utils.book_append_sheet(newWorkbook, newWorksheet, "Sheet1");

        const excelBuffer = XLSX.write(newWorkbook, {
          bookType: "xlsx",
          type: "array",
        });
        const blob = new Blob([excelBuffer], {
          type: "application/octet-stream",
        });

        convertedFiles = [{ name: `${file.name.split(".csv")[0]}.xlsx`, blob }];

        // Update progress
        progress = ((index + 1) / files.length) * 100;

        // If all files are processed, stop loading
        if (index === files.length - 1) {
          loading = false;
          successMessage = "All files have been successfully converted!";
        }
      } catch (error) {
        error = `Error processing file: ${file.name}`;
        loading = false;
      }
    };
    reader.readAsBinaryString(file);
  });
};
---

<div
  class="min-h-screen flex flex-col items-center justify-center bg-gradient-to-r from-blue-500 to-indigo-600 p-4"
>
  <head>
    <title>CSV to Excel Converter Free</title>
    <meta
      name="description"
      content="Free Convert your CSV files to Excel format easily and quickly."
    />
    <meta
      name="keywords"
      content="CSV, Excel, Converter, Batch Conversion, Free, csv to excel, convert csv to excel"
    />
    <meta name="author" content="Jack Zhu" />
  </head>
  <Card class="w-full max-w-md shadow-lg" client:load>
    <CardHeader class="text-center" client:load>
      <h1 class="text-3xl font-bold text-black">
        Batch CSV to Excel Converter
      </h1>
    </CardHeader>
    <CardContent client:load>
      {
        error && (
          <Alert variant="destructive" class="mb-4" client:load>
            <ExclamationTriangleIcon class="h-4 w-4" />
            <AlertTitle client:load>Error</AlertTitle>
            <AlertDescription class="mb-4 font-bold text-red" client:load>
              {error}
            </AlertDescription>
          </Alert>
        )
      }
      {
        /* {error && <Alert type="error" message={error} class="mb-4 font-bold text-red" />} */
      }

      {
        /* {successMessage && <Alert type="success" message={successMessage} class="mb-4 font-bold text-black" />} */
      }
      {
        successMessage && (
          <Alert class="mb-4" client:load>
            <AlertCircle class="h-4 w-4" client:load />
            <AlertTitle client:load>Success</AlertTitle>
            <AlertDescription class="mb-4 font-bold text-black" client:load>
              {successMessage}
            </AlertDescription>
          </Alert>
        )
      }
      <Input
        type="file"
        accept=".csv"
        multiple
        onChange={handleFileChange}
        class="mb-4 p-2 border border-gray-300 rounded w-full"
      />
      {
        loading && (
          <div class="flex flex-col items-center">
            {/* <Circles color="#00BFFF" height={80} width={80} class="mb-4" /> */}
            <ProgressBar
              completed={progress}
              class="w-full"
              bgcolor="#4CAF50"
              basebgcolor="#e0e0de"
              height="10px"
              labelalignment="center"
              labelcolor="#ffffff"
              labelsize="14px"
              client:load
            />
          </div>
        )
      }
      {
        convertedFiles.length > 0 && (
          <div class="mt-4">
            <h2 class="text-xl font-bold text-black mb-2">
              Download Converted Files:
            </h2>
            <ul class="list-disc list-inside">
              {convertedFiles.map((file, index) => (
                <li key={index} class="text-black">
                  <a
                    href={URL.createObjectURL(file.blob)}
                    download={file.name}
                    class="text-blue-200 hover:text-blue-400"
                  >
                    {file.name}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </CardContent>
    <CardFooter class="text-center" client:load>
      <Button
        onClick={handleConvert}
        class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 w-full mb-4"
        disabled={loading}
        client:load
      >
        {loading ? "Converting..." : "Convert to Excel"}
      </Button>
    </CardFooter>
  </Card>
</div>
